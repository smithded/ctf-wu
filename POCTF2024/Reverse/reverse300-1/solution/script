#include "out.h"



int _init(EVP_PKEY_CTX *ctx)

{
  int iVar1;
  
  iVar1 = __gmon_start__();
  return iVar1;
}



void FUN_00401020(void)

{
  (*(code *)(undefined *)0x0)();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int puts(char *__s)

{
  int iVar1;
  
  iVar1 = puts(__s);
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

size_t strlen(char *__s)

{
  size_t sVar1;
  
  sVar1 = strlen(__s);
  return sVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int printf(char *__format,...)

{
  int iVar1;
  
  iVar1 = printf(__format);
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int strcmp(char *__s1,char *__s2)

{
  int iVar1;
  
  iVar1 = strcmp(__s1,__s2);
  return iVar1;
}



void __isoc99_scanf(void)

{
  __isoc99_scanf();
  return;
}



void processEntry _start(undefined8 param_1,undefined8 param_2)

{
  undefined auStack_8 [8];
  
  __libc_start_main(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



void _dl_relocate_static_pie(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x004010cd)
// WARNING: Removing unreachable block (ram,0x004010d7)

void deregister_tm_clones(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x0040110f)
// WARNING: Removing unreachable block (ram,0x00401119)

void register_tm_clones(void)

{
  return;
}



void __do_global_dtors_aux(void)

{
  if (completed_0 == '\0') {
    deregister_tm_clones();
    completed_0 = 1;
    return;
  }
  return;
}



void frame_dummy(void)

{
  register_tm_clones();
  return;
}



void xor_encrypt(long param_1,ulong param_2,long param_3,ulong param_4)

{
  undefined8 local_10;
  
  for (local_10 = 0; local_10 < param_2; local_10 = local_10 + 1) {
    *(byte *)(local_10 + param_1) =
         *(byte *)(local_10 + param_1) ^ *(byte *)(param_3 + local_10 % param_4);
  }
  return;
}



void reconstruct_key(long param_1)

{
  byte bVar1;
  byte local_2e [22];
  int local_18;
  int local_14;
  int local_10;
  int local_c;
  
  local_2e[0x11] = 0x74;
  local_2e[0x12] = 0x73;
  local_2e[0x13] = 0x78;
  local_2e[0x14] = 0x76;
  local_2e[0x15] = 0x67;
  local_2e[0xc] = 8;
  local_2e[0xd] = 0x1f;
  local_2e[0xe] = 0x3b;
  local_2e[0xf] = 0x3d;
  local_2e[0x10] = 0x2f;
  local_2e[7] = 0x70;
  local_2e[8] = 0x6a;
  local_2e[9] = 0x18;
  local_2e[10] = 1;
  local_2e[0xb] = 0x50;
  local_2e[0] = 0x66;
  local_2e[1] = 0x1a;
  local_2e[2] = 0x6e;
  local_2e[3] = 0x65;
  local_2e[4] = 0x16;
  local_2e[5] = 0x4d;
  local_2e[6] = 0x73;
  for (local_c = 0; local_c < 5; local_c = local_c + 1) {
    *(byte *)(param_1 + local_c) = local_2e[(long)local_c + 0x11] ^ 0x10;
  }
  for (local_10 = 0; local_10 < 5; local_10 = local_10 + 1) {
    *(byte *)(param_1 + (long)local_10 + 5) = local_2e[(long)local_10 + 0xc] ^ 0x5a;
  }
  for (local_14 = 0; local_14 < 5; local_14 = local_14 + 1) {
    *(byte *)(param_1 + (long)local_14 + 10) = local_2e[(long)local_14 + 7] ^ 0x20;
  }
  for (local_18 = 0; local_18 < 7; local_18 = local_18 + 1) {
    if (local_18 < 5) {
      bVar1 = 0x30;
    }
    else {
      bVar1 = 0;
    }
    *(byte *)(param_1 + (long)local_18 + 0xf) = bVar1 ^ local_2e[local_18];
  }
  return;
}



void decrypt_flag(char *param_1)

{
  size_t sVar1;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28;
  undefined8 local_20;
  undefined8 local_10;
  
  local_38 = 0x16302911120b0c14;
  local_30 = 0x212f12507d0f0514;
  local_28 = 0x3c51421242392c1a;
  local_20 = 0x85457716542395c;
  local_10 = 0x20;
  sVar1 = strlen(param_1);
  xor_encrypt(&local_38,local_10,param_1,sVar1);
  printf("The flag is: %s\n",&local_38);
  return;
}



undefined8 main(void)

{
  int iVar1;
  size_t sVar2;
  undefined8 uVar3;
  char local_48 [32];
  char local_28 [32];
  
  printf("Enter the key to decrypt the flag: ");
  __isoc99_scanf(&DAT_00402044,local_28);
  sVar2 = strlen(local_28);
  if (sVar2 == 0x16) {
    reconstruct_key(local_48);
    iVar1 = strcmp(local_28,local_48);
    if (iVar1 == 0) {
      decrypt_flag(local_48);
    }
    else {
      puts("Incorrect key. Try again.");
    }
    uVar3 = 0;
  }
  else {
    puts("Incorrect key length. Key must be 22 characters long.");
    uVar3 = 1;
  }
  return uVar3;
}



void _fini(void)

{
  return;
}




